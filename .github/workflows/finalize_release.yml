name: Finalize Release

on:
  workflow_dispatch:
    inputs:
      pr_url:
        description: "The URL of the PR to merge release into main"
        required: true
        type: string

jobs:
  finalize_release:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.JABO_APP_ID }}
          private-key: ${{ secrets.JABO_PRIVATE_KEY }}
          # will need to set the owner and repository
          # owner: "ownername"
          repositories: "workflows"

      - name: Validate PR URL
        id: validate_pr_url
        run: |
          if [[ ! "${{ github.event.inputs.pr_url }}" =~ ^https://github.com/[^/]+/[^/]+/pull/[0-9]+$ ]]; then
            echo "Error: The PR URL '${{ github.event.inputs.pr_url }}' does not match the expected format 'https://github.com/owner/repo/pull/X'."
            exit 1
          fi

      - name: Checkout Main Branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Set up Git
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

      - name: Extract branch and version
        id: extract_release_info
        run: |
          release_pr_number=$(echo "${{ github.event.inputs.pr_url }}" | grep -oP '\d+$')

          if [[ -z "$release_pr_number" ]]; then
            echo "No PR number found in the URL. Exiting workflow."
            exit 78
          fi

          # Get the PR details to determine the branch
          pr_details=$(gh pr view $release_pr_number --json headRefName -q ".headRefName")

          release_branch="${pr_details}"
          new_version="${release_branch#*/}"

          if [[ ! "$release_branch" =~ ^(release|hotfix)/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Release branch '$release_branch' does not match the expected format 'release/vX.X.X' or 'hotfix/vX.X.X'. Exiting workflow."
            exit 78
          fi

          echo "release_pr_number=$release_pr_number" >> $GITHUB_ENV
          echo "new_version=$new_version" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Wait for PR Checks to Pass
        run: |
          checks_response=$(gh pr checks ${{ env.release_pr_number }} 2>&1) || \
          if echo "$checks_response" | grep -qE "no checks reported on the '.*' branch"; then
            echo "No checks found on this PR."
            has_checks=false
          else
            echo "Checks found on this PR...continuing..."
            has_checks=true
          fi

          if [ "$has_checks" = true ]; then
            gh pr checks ${{ env.release_pr_number }} --watch
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge release PR
        run: |
          gh pr merge ${{ env.release_pr_number }} \
          --merge \
          --delete-branch
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Get Release Notes
        id: get_release_notes
        run: |
          git pull
          awk '/^## \[${{ env.new_version }}\]/ {flag=1; next} /^## \[/{if (flag) exit} flag {print $0}' CHANGELOG.md >> tmp_CHANGELOG.md
          sleep 10

      - name: Create GitHub Release
        run: |
          gh release create "${{ env.new_version }}" \
            --title "${{ env.new_version }}" \
            --notes-file tmp_CHANGELOG.md \
            --latest \
            --target main
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Create PR to merge main into develop
        run: |
          pr_url=$(gh pr create \
            --base develop \
            --head main \
            --title "Merge main into develop for release ${{ env.new_version }}" \
            --body "This PR is to merge the main branch into develop after releasing version ${{ env.new_version }}.")

          echo "pr_url=$pr_url" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Debug PR URL and Extract PR Number
        run: |
          echo "PR URL: ${{ env.pr_url }}"
          pr_number=$(echo "${{ env.pr_url }}" | grep -oP '\d+$')
          echo "Extracted PR Number: $pr_number"

          echo "pr_number=$pr_number" >> $GITHUB_ENV

      - name: Sleep
        run: |
          #Sometimes Github takes several seconds for checks to start,
          #so we sleep so the merge doesn't happen before checks start.
          sleep 30

      - name: Wait for PR Checks to Pass
        run: |
          checks_response=$(gh pr checks ${{ env.pr_number }} 2>&1) || \
          if echo "$checks_response" | grep -qE "no checks reported on the '.*' branch"; then
            echo "No checks found on this PR."
            has_checks=false
          else
            echo "Checks found on this PR...continuing..."
            has_checks=true
          fi

          if [ "$has_checks" = true ]; then
            gh pr checks ${{ env.pr_number }} --watch
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate another token
        id: generate-another-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.JABO_APP_ID }}
          private-key: ${{ secrets.JABO_PRIVATE_KEY }}
          # will need to set the owner and repository
          # owner: "ownername"
          repositories: "workflows"

      - name: Merge PR
        run: |
          gh pr merge ${{ env.pr_number }} --merge
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
