name: Create Release Branch and PR

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Select release type"
        required: true
        type: choice
        options:
          - Major
          - Minor
          - Patch
          - Manually Specified
      manual_version:
        description: "Manually specify version number"
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          latest_version=${latest_tag#v}
          echo "latest_version=${latest_version}" >> $GITHUB_ENV

      - name: Validate manual version input
        if: ${{ github.event.inputs.release_type == 'Manually Specified' }}
        run: |
          if [ -z "${{ github.event.inputs.manual_version }}" ]; then
            echo "Error: Manual version number must be provided when selecting 'Manually Specified'."
            exit 1
          fi

          if [[ ! "${{ github.event.inputs.manual_version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version number must be in the vX.X.X format."
            exit 1
          fi

      - name: Determine new version
        id: determine_version
        run: |
          latest_version=${{ env.latest_version }}
          echo "Current version is ${latest_version}"
          IFS='.' read -r major minor patch <<< "$latest_version"

          case "${{ github.event.inputs.release_type }}" in
            "Major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "Minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "Patch")
              patch=$((patch + 1))
              ;;
            "Manually Specified")
              new_version="${{ github.event.inputs.manual_version }}"
              new_version=${new_version#v}
              ;;
          esac

          if [ "${{ github.event.inputs.release_type }}" != "Manually Specified" ]; then
            new_version="${major}.${minor}.${patch}"
          fi

          echo "new_version=v${new_version}" >> $GITHUB_ENV
          echo "New version is ${new_version}"

      - name: Create release branch
        run: |
          git checkout -b release/${{ env.new_version }} develop
          git push origin release/${{ env.new_version }}

      - name: Update CHANGELOG
        run: |
          new_version="${{ env.new_version }}"

          # Define changelog sections
          unreleased_section="## [Unreleased](https://github.com/JustABitOff/workflows/compare/main...develop)\n\n### Added\n\n### Changed\n\n### Removed\n\n### Fixed\n"
          new_version_section="## [$new_version](https://github.com/JustABitOff/workflows/compare/v${{ env.latest_version }}...$new_version)\n\n### Added\n\n### Changed\n\n### Removed\n\n### Fixed\n"

          # Backup the original changelog
          cp CHANGELOG.md CHANGELOG.md.bak

          # Add new version section and move Unreleased section
          awk -v new_version_section="$new_version_section" '
          /^## \[Unreleased\]/ { 
            # Print the new unreleased section
            print new_version_section 
            # Skip the current Unreleased section
            in_unreleased=1
          }
          /^## \[v/ { 
            # Print the new version section
            if (in_unreleased) {
              print new_version_section
              in_unreleased=0
            }
            # Print the existing section
            print
            next
          }
          {
            print
          }' CHANGELOG.md.bak > CHANGELOG.md
